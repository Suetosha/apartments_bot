from aiogram import Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from dotenv import load_dotenv

from database.apartments import add_apartment
from utils.callback_factories import EditPublishedApartmentCallbackFactory
from utils.fsm import FSMFillForm, FSMEditForm

load_dotenv()
router = Router()


FORM_STORAGE = []

@router.callback_query(lambda c: c.data == "list_an_apartment")
async def start_landlord_form(callback_query: CallbackQuery, state: FSMContext):

    await callback_query.message.answer(
        text='–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É?',
    )

    await state.set_state(FSMFillForm.city)



@router.message(StateFilter(FSMFillForm.city))
async def process_city(message: Message, state: FSMContext):

    city = message.text

    await state.update_data(user_id=message.from_user.id, city=city)

    await state.set_state(FSMFillForm.meters)

    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?",
    )




@router.message(StateFilter(FSMFillForm.meters))
async def process_meters(message: Message, state: FSMContext):
    meters = message.text
    await state.update_data(meters=meters)

    await message.answer(
        "–ó–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –µ—ë —Å–¥–∞–≤–∞—Ç—å?",
    )

    await state.set_state(FSMFillForm.price)



@router.message(StateFilter(FSMFillForm.price))
async def process_price(message: Message, state: FSMContext):
    price = message.text
    await state.update_data(price=price)

    await state.set_state(FSMFillForm.title)

    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    )



@router.message(StateFilter(FSMFillForm.title))
async def process_title(message: Message, state: FSMContext):
    title = message.text
    await state.update_data(title=title)
    await state.set_state(FSMFillForm.description)

    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
    )


@router.message(StateFilter(FSMFillForm.description))
async def process_description(message: Message, state: FSMContext):
    description = message.text
    await state.update_data(description=description)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    del data['message_id']

    await state.clear()

    FORM_STORAGE.append(data)

    apartment_info = (
        f"üè† {data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ\n"
        f"üìè –ú–µ—Ç—Ä—ã: {data.get('meters', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º¬≤\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )


    buttons = [
        [InlineKeyboardButton(text="–î–∞", callback_data='save_apartment')],


        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_apartment')],
    ]


    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)


    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ!\n'
             '–û–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–∞–º:\n\n'
             f'{apartment_info}\n\n'
             f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?',
        reply_markup=keyboard

    )

@router.callback_query(lambda c: c.data == "save_apartment")
async def save_apartment(callback_query: CallbackQuery):
    try:
        apartment = list(filter(lambda a: a['user_id'] == callback_query.from_user.id, FORM_STORAGE))[0]

        add_apartment(title=apartment['title'],
                      price=apartment['price'],
                      city=apartment['city'],
                      meters=apartment['meters'],
                      description=apartment['description'],
                      user_id=apartment['user_id'])

        FORM_STORAGE.remove(apartment)
        await callback_query.message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
    except IndexError:
        await callback_query.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')


@router.callback_query(lambda c: c.data == "edit_apartment")
async def edit_apartment(callback_query: CallbackQuery):

    text = '–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?'

    buttons = [
        [InlineKeyboardButton(text="üèô –ì–æ—Ä–æ–¥", callback_data="edit_city")],
        [InlineKeyboardButton(text="üìè –ú–µ—Ç—Ä—ã", callback_data="edit_meters")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_price")],
        [InlineKeyboardButton(text="üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="edit_title")],
        [InlineKeyboardButton(text="üìÉ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.answer(text=text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("edit_"))
async def process_edit_choice(callback_query: CallbackQuery, state: FSMContext):
    field_map = {
        "edit_city": FSMEditForm.city,
        "edit_meters": FSMEditForm.meters,
        "edit_price": FSMEditForm.price,
        "edit_title": FSMEditForm.title,
        "edit_description": FSMEditForm.description,
    }

    field = callback_query.data
    await state.set_state(field_map[field])

    messages = {
        "edit_city": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:",
        "edit_meters": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤:",
        "edit_price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:",
        "edit_title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        "edit_description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
    }

    await callback_query.message.answer(messages[field])



@router.message(StateFilter(FSMEditForm.city))
async def process_edit_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await finish_editing(message, state)


@router.message(StateFilter(FSMEditForm.meters))
async def process_edit_meters(message: Message, state: FSMContext):
    await state.update_data(meters=message.text)
    await finish_editing(message, state)


@router.message(StateFilter(FSMEditForm.price))
async def process_edit_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await finish_editing(message, state)


@router.message(StateFilter(FSMEditForm.title))
async def process_edit_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await finish_editing(message, state)


@router.message(StateFilter(FSMEditForm.description))
async def process_edit_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await finish_editing(message, state)



async def finish_editing(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        apartment = list(filter(lambda a: a['user_id'] == message.from_user.id, FORM_STORAGE))[0]
        apartment.update(data)


        apartment_info = (
            f"üè† {apartment.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ –¶–µ–Ω–∞: {apartment.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ\n"
            f"üìè –ú–µ—Ç—Ä—ã: {apartment.get('meters', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º¬≤\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {apartment.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

        buttons = [
            [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_apartment")],
            [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="edit_apartment")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text=f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{apartment_info}",
            reply_markup=keyboard
        )

        await state.clear()
    except IndexError:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')


@router.callback_query(EditPublishedApartmentCallbackFactory.filter())
async def edit_published_apartment_callback(callback_query: CallbackQuery, state: FSMContext):
    pass







