from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton

from dotenv import load_dotenv

from database.activity import mark_as_liked, mark_as_viewed, mark_as_unliked, get_liked_apartments
from database.apartments import get_apartments_by_filter, get_apartment
from keyboards.apartments_kb import get_feedback_keyboard
from keyboards.favorites_kb import favorite_apartment_selection_kb, favorites_kb
from utils.callback_factories import GetApartmentCallbackFactory, DeleteFavoriteCallbackFactory
from utils.fsm import FSMFillFilter

from database.filter import save_filter, get_user_filters

load_dotenv()
router = Router()



# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
@router.callback_query(lambda c: c.data == "start_filter")
async def start_fill_form(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    sent_message_id = user_data.get("message_id")

    keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="–ú–æ—Å–∫–≤–∞")],
        [InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [InlineKeyboardButton(text="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", callback_data="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")]
    ])

    sent_message = await callback_query.message.bot.edit_message_text(
        text="–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∏—â–µ—à—å –∫–≤–∞—Ä—Ç–∏—Ä—É?",
        message_id=sent_message_id,
        chat_id=callback_query.message.chat.id,
        reply_markup=keyboard,
    )

    await state.update_data(message_id=sent_message.message_id)
    await state.set_state(FSMFillFilter.city)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@router.callback_query(StateFilter(FSMFillFilter.city))
async def process_city(callback_query: CallbackQuery, state: FSMContext):
    city = callback_query.data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º data –∏–∑ callback_query

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city=city)

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    sent_message_id = user_data.get("message_id")

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –º–µ—Ç—Ä–∞–∂–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="20 - 40 –º¬≤", callback_data="20 - 40 –º¬≤")],
            [InlineKeyboardButton(text="40 - 60 –º¬≤", callback_data="40 - 60 –º¬≤")],
            [InlineKeyboardButton(text="60 - 80 –º¬≤", callback_data="60 - 80 –º¬≤")],
            [InlineKeyboardButton(text="80 - 100 –º¬≤", callback_data="80 - 100 –º¬≤")],
            [InlineKeyboardButton(text="100 - –∏ –±–æ–ª–µ–µ –º¬≤", callback_data="100 - –∏ –±–æ–ª–µ–µ –º¬≤")]
        ],
        resize_keyboard=True
    )

    sent_message = await callback_query.message.bot.edit_message_text(
        "–ö–∞–∫–æ–π –º–µ—Ç—Ä–∞–∂ —Ç–µ–±–µ –Ω—É–∂–µ–Ω?",
        message_id=sent_message_id,
        chat_id=callback_query.message.chat.id,
        reply_markup=keyboard
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data(message_id=sent_message.message_id)
    await state.set_state(FSMFillFilter.meters)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∞–∂–∞
@router.callback_query(StateFilter(FSMFillFilter.meters))
async def process_meters(callback_query: CallbackQuery, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    sent_message_id = user_data.get("message_id")

    meters = callback_query.data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(meters=meters)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = (
        f"üîπ –ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"üîπ –ú–µ—Ç—Ä—ã: {meters}"
    )

    user_id = callback_query.from_user.id
    save_filter(user_id, data.get('city'), meters)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä
    start_viewing_button = InlineKeyboardButton(text="–ù–∞—á–Ω–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä?", callback_data="view_apartments")
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=[[start_viewing_button]])

    await callback_query.message.bot.edit_message_text(
        f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{result_text}",
        message_id=sent_message_id,
        chat_id=callback_query.message.chat.id,
        reply_markup=keyboard
    )

    await state.clear()





# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä
@router.callback_query(lambda c: c.data == "view_apartments")
async def start_viewing_apartments(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    filters = get_user_filters(user_id)

    if not filters:
        await callback_query.message.answer("–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –º–µ—Ç—Ä–∞–∂.")
        return

    apartments = get_apartments_by_filter(filters["city"], filters["meters"])
    if apartments:
        await state.update_data(apartments=apartments, current_index=0)
        await show_apartment(callback_query.message, state, apartments[0])
    else:
        await callback_query.message.answer("–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")


async def show_apartment(message, state, apartment):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–≤–∞—Ä—Ç–∏—Ä–æ–π """

    keyboard = get_feedback_keyboard()
    apartment_info = (
        f"üè† {apartment[1]}\n"
        f"üí∞ –¶–µ–Ω–∞: {apartment[2]} ‚ÇΩ\n"
        f"üìè –ú–µ—Ç—Ä–∞–∂: {apartment[3]} –º¬≤\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {apartment[4]}"
    )

    data = await state.get_data()
    message_id = data.get("current_message_id")

    if message_id:
        await message.bot.edit_message_text(apartment_info, chat_id=message.chat.id, message_id=message_id,
                                            reply_markup=keyboard)
    else:
        sent_message = await message.answer(apartment_info, reply_markup=keyboard)
        await state.update_data(current_message_id=sent_message.message_id)

    await state.update_data(current_apartment_id=apartment[0])



@router.callback_query(lambda c: c.data in ["like", "dislike"])
async def process_apartment_feedback(callback_query: types.CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫–∏"""
    user_id = callback_query.from_user.id
    action = callback_query.data

    data = await state.get_data()
    apartments = data.get("apartments", [])
    current_index = data.get("current_index", 0)

    current_apartment_id = data.get("current_apartment_id")

    if current_apartment_id is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞.")
        return

    if action == "like":
        mark_as_liked(user_id, current_apartment_id)
    else:
        mark_as_viewed(user_id, current_apartment_id)

    next_index = current_index + 1


    if next_index < len(apartments):
        next_apartment = apartments[next_index]
        await state.update_data(current_index=next_index, current_apartment_id=next_apartment[0])
        await show_apartment(callback_query.message, state, next_apartment)
    else:
        await callback_query.message.bot.edit_message_text(
            "üè† –ö–≤–∞—Ä—Ç–∏—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä.",
            chat_id=callback_query.message.chat.id,
            message_id=data.get("current_message_id"),
            reply_markup=None
        )
        await state.clear()

    await callback_query.answer()




@router.callback_query(GetApartmentCallbackFactory.filter())
async def get_apartment_callback(callback: CallbackQuery, callback_data: GetApartmentCallbackFactory):

    apartment = get_apartment(callback_data.apartment_id)

    apartment_info = (
        f"üè† {apartment[1]}\n"
        f"üí∞ –¶–µ–Ω–∞: {apartment[2]} ‚ÇΩ\n"
        f"üìè –ú–µ—Ç—Ä–∞–∂: {apartment[3]} –º¬≤\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {apartment[4]}"
    )

    await callback.message.answer(apartment_info,
                                       reply_markup=favorite_apartment_selection_kb(
                                           callback_data.user_id, callback_data.apartment_id, callback_data.message_id))




@router.callback_query(DeleteFavoriteCallbackFactory.filter())
async def delete_favorite_callback(callback: CallbackQuery, callback_data: DeleteFavoriteCallbackFactory):
    user_id = callback_data.user_id
    apartment = callback_data.apartment_id
    message_id = callback_data.message_id
    mark_as_unliked(user_id, apartment)


    liked_apartments = get_liked_apartments(user_id)
    keyboard = favorites_kb(liked_apartments, user_id, message_id=message_id)

    await callback.message.delete()
    await callback.message.bot.edit_message_text('–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä',
                                                 message_id=message_id,
                                                 chat_id=callback.message.chat.id,
                                                 reply_markup=keyboard)
